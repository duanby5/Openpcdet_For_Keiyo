2021-10-20 23:41:58,360   INFO  **********************Start logging**********************
2021-10-20 23:41:58,362   INFO  CUDA_VISIBLE_DEVICES=2
2021-10-20 23:41:58,364   INFO  cfg_file         ./cfgs/kitti_models/pv_rcnn.yaml
2021-10-20 23:41:58,366   INFO  batch_size       2
2021-10-20 23:41:58,367   INFO  epochs           80
2021-10-20 23:41:58,368   INFO  workers          8
2021-10-20 23:41:58,369   INFO  extra_tag        default
2021-10-20 23:41:58,369   INFO  ckpt             None
2021-10-20 23:41:58,370   INFO  pretrained_model None
2021-10-20 23:41:58,371   INFO  launcher         none
2021-10-20 23:41:58,372   INFO  tcp_port         18888
2021-10-20 23:41:58,373   INFO  sync_bn          False
2021-10-20 23:41:58,374   INFO  fix_random_seed  False
2021-10-20 23:41:58,375   INFO  ckpt_save_interval 1
2021-10-20 23:41:58,376   INFO  local_rank       0
2021-10-20 23:41:58,377   INFO  max_ckpt_save_num 30
2021-10-20 23:41:58,377   INFO  merge_all_iters_to_one_epoch False
2021-10-20 23:41:58,378   INFO  set_cfgs         None
2021-10-20 23:41:58,379   INFO  max_waiting_mins 0
2021-10-20 23:41:58,380   INFO  start_epoch      0
2021-10-20 23:41:58,381   INFO  save_to_file     False
2021-10-20 23:41:58,382   INFO  cfg.ROOT_DIR: /OpenPCDet
2021-10-20 23:41:58,383   INFO  cfg.LOCAL_RANK: 0
2021-10-20 23:41:58,384   INFO  cfg.CLASS_NAMES: ['Car', 'Pedestrian', 'Cyclist']
2021-10-20 23:41:58,385   INFO  
cfg.DATA_CONFIG = edict()
2021-10-20 23:41:58,386   INFO  cfg.DATA_CONFIG.DATASET: KittiDataset
2021-10-20 23:41:58,386   INFO  cfg.DATA_CONFIG.DATA_PATH: ../data/kitti
2021-10-20 23:41:58,387   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [0, -40, -3, 70.4, 40, 1]
2021-10-20 23:41:58,388   INFO  
cfg.DATA_CONFIG.DATA_SPLIT = edict()
2021-10-20 23:41:58,389   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2021-10-20 23:41:58,390   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: val
2021-10-20 23:41:58,391   INFO  
cfg.DATA_CONFIG.INFO_PATH = edict()
2021-10-20 23:41:58,392   INFO  cfg.DATA_CONFIG.INFO_PATH.train: ['kitti_infos_train.pkl']
2021-10-20 23:41:58,393   INFO  cfg.DATA_CONFIG.INFO_PATH.test: ['kitti_infos_val.pkl']
2021-10-20 23:41:58,393   INFO  cfg.DATA_CONFIG.GET_ITEM_LIST: ['points']
2021-10-20 23:41:58,394   INFO  cfg.DATA_CONFIG.FOV_POINTS_ONLY: True
2021-10-20 23:41:58,395   INFO  
cfg.DATA_CONFIG.DATA_AUGMENTOR = edict()
2021-10-20 23:41:58,396   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.DISABLE_AUG_LIST: ['placeholder']
2021-10-20 23:41:58,397   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.AUG_CONFIG_LIST: [{'NAME': 'gt_sampling', 'USE_ROAD_PLANE': False, 'DB_INFO_PATH': ['kitti_dbinfos_train.pkl'], 'PREPARE': {'filter_by_min_points': ['Car:5', 'Pedestrian:5', 'Cyclist:5'], 'filter_by_difficulty': [-1]}, 'SAMPLE_GROUPS': ['Car:15', 'Pedestrian:10', 'Cyclist:10'], 'NUM_POINT_FEATURES': 4, 'DATABASE_WITH_FAKELIDAR': False, 'REMOVE_EXTRA_WIDTH': [0.0, 0.0, 0.0], 'LIMIT_WHOLE_SCENE': False}, {'NAME': 'random_world_flip', 'ALONG_AXIS_LIST': ['x']}, {'NAME': 'random_world_rotation', 'WORLD_ROT_ANGLE': [-0.78539816, 0.78539816]}, {'NAME': 'random_world_scaling', 'WORLD_SCALE_RANGE': [0.95, 1.05]}]
2021-10-20 23:41:58,398   INFO  
cfg.DATA_CONFIG.POINT_FEATURE_ENCODING = edict()
2021-10-20 23:41:58,399   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding
2021-10-20 23:41:58,400   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'intensity']
2021-10-20 23:41:58,401   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'intensity']
2021-10-20 23:41:58,402   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': False}}, {'NAME': 'transform_points_to_voxels', 'VOXEL_SIZE': [0.05, 0.05, 0.1], 'MAX_POINTS_PER_VOXEL': 5, 'MAX_NUMBER_OF_VOXELS': {'train': 16000, 'test': 40000}}]
2021-10-20 23:41:58,402   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: cfgs/dataset_configs/kitti_dataset.yaml
2021-10-20 23:41:58,403   INFO  
cfg.MODEL = edict()
2021-10-20 23:41:58,404   INFO  cfg.MODEL.NAME: PVRCNN
2021-10-20 23:41:58,405   INFO  
cfg.MODEL.VFE = edict()
2021-10-20 23:41:58,406   INFO  cfg.MODEL.VFE.NAME: MeanVFE
2021-10-20 23:41:58,407   INFO  
cfg.MODEL.BACKBONE_3D = edict()
2021-10-20 23:41:58,408   INFO  cfg.MODEL.BACKBONE_3D.NAME: VoxelBackBone8x
2021-10-20 23:41:58,409   INFO  
cfg.MODEL.MAP_TO_BEV = edict()
2021-10-20 23:41:58,409   INFO  cfg.MODEL.MAP_TO_BEV.NAME: HeightCompression
2021-10-20 23:41:58,410   INFO  cfg.MODEL.MAP_TO_BEV.NUM_BEV_FEATURES: 256
2021-10-20 23:41:58,411   INFO  
cfg.MODEL.BACKBONE_2D = edict()
2021-10-20 23:41:58,412   INFO  cfg.MODEL.BACKBONE_2D.NAME: BaseBEVBackbone
2021-10-20 23:41:58,413   INFO  cfg.MODEL.BACKBONE_2D.LAYER_NUMS: [5, 5]
2021-10-20 23:41:58,414   INFO  cfg.MODEL.BACKBONE_2D.LAYER_STRIDES: [1, 2]
2021-10-20 23:41:58,415   INFO  cfg.MODEL.BACKBONE_2D.NUM_FILTERS: [128, 256]
2021-10-20 23:41:58,415   INFO  cfg.MODEL.BACKBONE_2D.UPSAMPLE_STRIDES: [1, 2]
2021-10-20 23:41:58,416   INFO  cfg.MODEL.BACKBONE_2D.NUM_UPSAMPLE_FILTERS: [256, 256]
2021-10-20 23:41:58,417   INFO  
cfg.MODEL.DENSE_HEAD = edict()
2021-10-20 23:41:58,418   INFO  cfg.MODEL.DENSE_HEAD.NAME: AnchorHeadSingle
2021-10-20 23:41:58,419   INFO  cfg.MODEL.DENSE_HEAD.CLASS_AGNOSTIC: False
2021-10-20 23:41:58,420   INFO  cfg.MODEL.DENSE_HEAD.USE_DIRECTION_CLASSIFIER: True
2021-10-20 23:41:58,421   INFO  cfg.MODEL.DENSE_HEAD.DIR_OFFSET: 0.78539
2021-10-20 23:41:58,422   INFO  cfg.MODEL.DENSE_HEAD.DIR_LIMIT_OFFSET: 0.0
2021-10-20 23:41:58,422   INFO  cfg.MODEL.DENSE_HEAD.NUM_DIR_BINS: 2
2021-10-20 23:41:58,423   INFO  cfg.MODEL.DENSE_HEAD.ANCHOR_GENERATOR_CONFIG: [{'class_name': 'Car', 'anchor_sizes': [[3.9, 1.6, 1.56]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [-1.78], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.6, 'unmatched_threshold': 0.45}, {'class_name': 'Pedestrian', 'anchor_sizes': [[0.8, 0.6, 1.73]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [-0.6], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}, {'class_name': 'Cyclist', 'anchor_sizes': [[1.76, 0.6, 1.73]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [-0.6], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.5, 'unmatched_threshold': 0.35}]
2021-10-20 23:41:58,424   INFO  
cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG = edict()
2021-10-20 23:41:58,425   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NAME: AxisAlignedTargetAssigner
2021-10-20 23:41:58,426   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.POS_FRACTION: -1.0
2021-10-20 23:41:58,427   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.SAMPLE_SIZE: 512
2021-10-20 23:41:58,428   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NORM_BY_NUM_EXAMPLES: False
2021-10-20 23:41:58,428   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.MATCH_HEIGHT: False
2021-10-20 23:41:58,429   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.BOX_CODER: ResidualCoder
2021-10-20 23:41:58,430   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG = edict()
2021-10-20 23:41:58,431   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2021-10-20 23:41:58,432   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.cls_weight: 1.0
2021-10-20 23:41:58,433   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.loc_weight: 2.0
2021-10-20 23:41:58,434   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.dir_weight: 0.2
2021-10-20 23:41:58,434   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2021-10-20 23:41:58,435   INFO  
cfg.MODEL.PFE = edict()
2021-10-20 23:41:58,436   INFO  cfg.MODEL.PFE.NAME: VoxelSetAbstraction
2021-10-20 23:41:58,437   INFO  cfg.MODEL.PFE.POINT_SOURCE: raw_points
2021-10-20 23:41:58,438   INFO  cfg.MODEL.PFE.NUM_KEYPOINTS: 2048
2021-10-20 23:41:58,439   INFO  cfg.MODEL.PFE.NUM_OUTPUT_FEATURES: 128
2021-10-20 23:41:58,440   INFO  cfg.MODEL.PFE.SAMPLE_METHOD: FPS
2021-10-20 23:41:58,440   INFO  cfg.MODEL.PFE.FEATURES_SOURCE: ['bev', 'x_conv1', 'x_conv2', 'x_conv3', 'x_conv4', 'raw_points']
2021-10-20 23:41:58,441   INFO  
cfg.MODEL.PFE.SA_LAYER = edict()
2021-10-20 23:41:58,442   INFO  
cfg.MODEL.PFE.SA_LAYER.raw_points = edict()
2021-10-20 23:41:58,443   INFO  cfg.MODEL.PFE.SA_LAYER.raw_points.MLPS: [[16, 16], [16, 16]]
2021-10-20 23:41:58,444   INFO  cfg.MODEL.PFE.SA_LAYER.raw_points.POOL_RADIUS: [0.4, 0.8]
2021-10-20 23:41:58,445   INFO  cfg.MODEL.PFE.SA_LAYER.raw_points.NSAMPLE: [16, 16]
2021-10-20 23:41:58,446   INFO  
cfg.MODEL.PFE.SA_LAYER.x_conv1 = edict()
2021-10-20 23:41:58,447   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv1.DOWNSAMPLE_FACTOR: 1
2021-10-20 23:41:58,448   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv1.MLPS: [[16, 16], [16, 16]]
2021-10-20 23:41:58,449   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv1.POOL_RADIUS: [0.4, 0.8]
2021-10-20 23:41:58,449   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv1.NSAMPLE: [16, 16]
2021-10-20 23:41:58,450   INFO  
cfg.MODEL.PFE.SA_LAYER.x_conv2 = edict()
2021-10-20 23:41:58,451   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv2.DOWNSAMPLE_FACTOR: 2
2021-10-20 23:41:58,452   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv2.MLPS: [[32, 32], [32, 32]]
2021-10-20 23:41:58,453   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv2.POOL_RADIUS: [0.8, 1.2]
2021-10-20 23:41:58,454   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv2.NSAMPLE: [16, 32]
2021-10-20 23:41:58,455   INFO  
cfg.MODEL.PFE.SA_LAYER.x_conv3 = edict()
2021-10-20 23:41:58,455   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv3.DOWNSAMPLE_FACTOR: 4
2021-10-20 23:41:58,456   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv3.MLPS: [[64, 64], [64, 64]]
2021-10-20 23:41:58,457   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv3.POOL_RADIUS: [1.2, 2.4]
2021-10-20 23:41:58,458   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv3.NSAMPLE: [16, 32]
2021-10-20 23:41:58,459   INFO  
cfg.MODEL.PFE.SA_LAYER.x_conv4 = edict()
2021-10-20 23:41:58,460   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv4.DOWNSAMPLE_FACTOR: 8
2021-10-20 23:41:58,461   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv4.MLPS: [[64, 64], [64, 64]]
2021-10-20 23:41:58,462   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv4.POOL_RADIUS: [2.4, 4.8]
2021-10-20 23:41:58,462   INFO  cfg.MODEL.PFE.SA_LAYER.x_conv4.NSAMPLE: [16, 32]
2021-10-20 23:41:58,463   INFO  
cfg.MODEL.POINT_HEAD = edict()
2021-10-20 23:41:58,464   INFO  cfg.MODEL.POINT_HEAD.NAME: PointHeadSimple
2021-10-20 23:41:58,465   INFO  cfg.MODEL.POINT_HEAD.CLS_FC: [256, 256]
2021-10-20 23:41:58,466   INFO  cfg.MODEL.POINT_HEAD.CLASS_AGNOSTIC: True
2021-10-20 23:41:58,467   INFO  cfg.MODEL.POINT_HEAD.USE_POINT_FEATURES_BEFORE_FUSION: True
2021-10-20 23:41:58,467   INFO  
cfg.MODEL.POINT_HEAD.TARGET_CONFIG = edict()
2021-10-20 23:41:58,468   INFO  cfg.MODEL.POINT_HEAD.TARGET_CONFIG.GT_EXTRA_WIDTH: [0.2, 0.2, 0.2]
2021-10-20 23:41:58,469   INFO  
cfg.MODEL.POINT_HEAD.LOSS_CONFIG = edict()
2021-10-20 23:41:58,470   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_REG: smooth-l1
2021-10-20 23:41:58,471   INFO  
cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2021-10-20 23:41:58,472   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.point_cls_weight: 1.0
2021-10-20 23:41:58,473   INFO  
cfg.MODEL.ROI_HEAD = edict()
2021-10-20 23:41:58,473   INFO  cfg.MODEL.ROI_HEAD.NAME: PVRCNNHead
2021-10-20 23:41:58,474   INFO  cfg.MODEL.ROI_HEAD.CLASS_AGNOSTIC: True
2021-10-20 23:41:58,475   INFO  cfg.MODEL.ROI_HEAD.SHARED_FC: [256, 256]
2021-10-20 23:41:58,476   INFO  cfg.MODEL.ROI_HEAD.CLS_FC: [256, 256]
2021-10-20 23:41:58,477   INFO  cfg.MODEL.ROI_HEAD.REG_FC: [256, 256]
2021-10-20 23:41:58,478   INFO  cfg.MODEL.ROI_HEAD.DP_RATIO: 0.3
2021-10-20 23:41:58,478   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG = edict()
2021-10-20 23:41:58,479   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN = edict()
2021-10-20 23:41:58,480   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_TYPE: nms_gpu
2021-10-20 23:41:58,481   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.MULTI_CLASSES_NMS: False
2021-10-20 23:41:58,482   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_PRE_MAXSIZE: 9000
2021-10-20 23:41:58,483   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_POST_MAXSIZE: 512
2021-10-20 23:41:58,484   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_THRESH: 0.8
2021-10-20 23:41:58,484   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST = edict()
2021-10-20 23:41:58,485   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_TYPE: nms_gpu
2021-10-20 23:41:58,486   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.MULTI_CLASSES_NMS: False
2021-10-20 23:41:58,487   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_PRE_MAXSIZE: 1024
2021-10-20 23:41:58,488   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_POST_MAXSIZE: 100
2021-10-20 23:41:58,489   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_THRESH: 0.7
2021-10-20 23:41:58,490   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL = edict()
2021-10-20 23:41:58,490   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.GRID_SIZE: 6
2021-10-20 23:41:58,491   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.MLPS: [[64, 64], [64, 64]]
2021-10-20 23:41:58,492   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_RADIUS: [0.8, 1.6]
2021-10-20 23:41:58,493   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.NSAMPLE: [16, 16]
2021-10-20 23:41:58,494   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_METHOD: max_pool
2021-10-20 23:41:58,495   INFO  
cfg.MODEL.ROI_HEAD.TARGET_CONFIG = edict()
2021-10-20 23:41:58,495   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.BOX_CODER: ResidualCoder
2021-10-20 23:41:58,496   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.ROI_PER_IMAGE: 128
2021-10-20 23:41:58,497   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.FG_RATIO: 0.5
2021-10-20 23:41:58,498   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.SAMPLE_ROI_BY_EACH_CLASS: True
2021-10-20 23:41:58,499   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_SCORE_TYPE: roi_iou
2021-10-20 23:41:58,500   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_FG_THRESH: 0.75
2021-10-20 23:41:58,501   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_BG_THRESH: 0.25
2021-10-20 23:41:58,501   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.CLS_BG_THRESH_LO: 0.1
2021-10-20 23:41:58,502   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.HARD_BG_RATIO: 0.8
2021-10-20 23:41:58,503   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.REG_FG_THRESH: 0.55
2021-10-20 23:41:58,504   INFO  
cfg.MODEL.ROI_HEAD.LOSS_CONFIG = edict()
2021-10-20 23:41:58,505   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.CLS_LOSS: BinaryCrossEntropy
2021-10-20 23:41:58,506   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.REG_LOSS: smooth-l1
2021-10-20 23:41:58,506   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.CORNER_LOSS_REGULARIZATION: True
2021-10-20 23:41:58,507   INFO  
cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2021-10-20 23:41:58,508   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_cls_weight: 1.0
2021-10-20 23:41:58,509   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_reg_weight: 1.0
2021-10-20 23:41:58,510   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_corner_weight: 1.0
2021-10-20 23:41:58,511   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2021-10-20 23:41:58,511   INFO  
cfg.MODEL.POST_PROCESSING = edict()
2021-10-20 23:41:58,512   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
2021-10-20 23:41:58,513   INFO  cfg.MODEL.POST_PROCESSING.SCORE_THRESH: 0.1
2021-10-20 23:41:58,514   INFO  cfg.MODEL.POST_PROCESSING.OUTPUT_RAW_SCORE: False
2021-10-20 23:41:58,515   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: kitti
2021-10-20 23:41:58,516   INFO  
cfg.MODEL.POST_PROCESSING.NMS_CONFIG = edict()
2021-10-20 23:41:58,517   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.MULTI_CLASSES_NMS: False
2021-10-20 23:41:58,517   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2021-10-20 23:41:58,518   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.1
2021-10-20 23:41:58,519   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 4096
2021-10-20 23:41:58,520   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 500
2021-10-20 23:41:58,521   INFO  
cfg.OPTIMIZATION = edict()
2021-10-20 23:41:58,522   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 2
2021-10-20 23:41:58,522   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 80
2021-10-20 23:41:58,523   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2021-10-20 23:41:58,524   INFO  cfg.OPTIMIZATION.LR: 0.01
2021-10-20 23:41:58,525   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.01
2021-10-20 23:41:58,526   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2021-10-20 23:41:58,527   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.85]
2021-10-20 23:41:58,528   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2021-10-20 23:41:58,528   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2021-10-20 23:41:58,529   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [35, 45]
2021-10-20 23:41:58,530   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2021-10-20 23:41:58,531   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2021-10-20 23:41:58,532   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2021-10-20 23:41:58,533   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2021-10-20 23:41:58,533   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 10
2021-10-20 23:41:58,534   INFO  cfg.TAG: pv_rcnn
2021-10-20 23:41:58,535   INFO  cfg.EXP_GROUP_PATH: cfgs/kitti_models
2021-10-20 23:41:58,826   INFO  Database filter by min points Car: 14357 => 13532
2021-10-20 23:41:58,832   INFO  Database filter by min points Pedestrian: 2207 => 2168
2021-10-20 23:41:58,835   INFO  Database filter by min points Cyclist: 734 => 705
2021-10-20 23:41:58,889   INFO  Database filter by difficulty Car: 13532 => 10759
2021-10-20 23:41:58,898   INFO  Database filter by difficulty Pedestrian: 2168 => 2075
2021-10-20 23:41:58,902   INFO  Database filter by difficulty Cyclist: 705 => 581
2021-10-20 23:42:02,610   INFO  Loading KITTI dataset
2021-10-20 23:42:02,784   INFO  Total samples for KITTI dataset: 3712
2021-10-20 23:42:14,649   INFO  PVRCNN(
  (vfe): MeanVFE()
  (backbone_3d): VoxelBackBone8x(
    (conv_input): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (conv1): SparseSequential(
      (0): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv2): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d()
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (2): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv3): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d()
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (2): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv4): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d()
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (2): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv_out): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (map_to_bev_module): HeightCompression()
  (pfe): VoxelSetAbstraction(
    (SA_layers): ModuleList(
      (0): StackSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(19, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(19, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
        )
      )
      (1): StackSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(35, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(35, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
        )
      )
      (2): StackSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(67, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(67, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
        )
      )
      (3): StackSAModuleMSG(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(67, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(67, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
          )
        )
      )
    )
    (SA_rawpoints): StackSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
      )
    )
    (vsa_point_feature_fusion): Sequential(
      (0): Linear(in_features=640, out_features=128, bias=False)
      (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (backbone_2d): BaseBEVBackbone(
    (blocks): ModuleList(
      (0): Sequential(
        (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
        (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (2): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (5): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (8): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (9): ReLU()
        (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (11): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (12): ReLU()
        (13): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (14): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (15): ReLU()
        (16): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (17): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (18): ReLU()
      )
      (1): Sequential(
        (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
        (1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
        (2): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (5): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (8): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (9): ReLU()
        (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (11): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (12): ReLU()
        (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (14): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (15): ReLU()
        (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (17): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (18): ReLU()
      )
    )
    (deblocks): ModuleList(
      (0): Sequential(
        (0): ConvTranspose2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): Sequential(
        (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
  )
  (dense_head): AnchorHeadSingle(
    (cls_loss_func): SigmoidFocalClassificationLoss()
    (reg_loss_func): WeightedSmoothL1Loss()
    (dir_loss_func): WeightedCrossEntropyLoss()
    (conv_cls): Conv2d(512, 18, kernel_size=(1, 1), stride=(1, 1))
    (conv_box): Conv2d(512, 42, kernel_size=(1, 1), stride=(1, 1))
    (conv_dir_cls): Conv2d(512, 12, kernel_size=(1, 1), stride=(1, 1))
  )
  (point_head): PointHeadSimple(
    (cls_loss_func): SigmoidFocalClassificationLoss()
    (cls_layers): Sequential(
      (0): Linear(in_features=640, out_features=256, bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=256, out_features=256, bias=False)
      (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU()
      (6): Linear(in_features=256, out_features=1, bias=True)
    )
  )
  (roi_head): PVRCNNHead(
    (proposal_target_layer): ProposalTargetLayer()
    (reg_loss_func): WeightedSmoothL1Loss()
    (roi_grid_pool_layer): StackSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(131, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(131, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
        )
      )
    )
    (shared_fc_layer): Sequential(
      (0): Conv1d(27648, 256, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Dropout(p=0.3, inplace=False)
      (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): ReLU()
    )
    (cls_layers): Sequential(
      (0): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Dropout(p=0.3, inplace=False)
      (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): ReLU()
      (7): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
    )
    (reg_layers): Sequential(
      (0): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Dropout(p=0.3, inplace=False)
      (4): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
      (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): ReLU()
      (7): Conv1d(256, 7, kernel_size=(1,), stride=(1,))
    )
  )
)
2021-10-20 23:42:14,684   INFO  **********************Start training cfgs/kitti_models/pv_rcnn(default)**********************
